# SCsub file for the ROS2 module
import os
from pathlib import Path

# Import the environment configuration
Import('env')

# Compiler settings
cpp_version = "-std=c++17"
exceptions = "-fexceptions"

# Retrieve the ROS2 package prefix and list of packages
pkg_prefix = os.popen("ros2 pkg prefix rclcpp").read().strip()
pkg_list = os.popen("ros2 pkg list").read().strip()

# Define the path for ROS libraries
ros_lib_path = os.path.join(pkg_prefix, "lib")

# Add all .cpp files from the source directories to the build
env.add_source_files(env.modules_sources, "src/demos/*.cpp")
# env.add_source_files(env.modules_sources, "src/sensors/lidars/*.cpp")
env.add_source_files(env.modules_sources, "*.cpp")

# Include directories to be added to the build
includes_list = ["include"]
pkg_names = []

# Add the include directories for each package
for pkg in pkg_list.split("\n"):
    pkg_path = os.path.join(pkg_prefix, "include", pkg)
    pkg_names.append(pkg)
    includes_list.append(pkg_path)

env.Append(CPPPATH=includes_list)

# Function to get library names from a given path
def get_lib_names(base_path: str):
    if not base_path.endswith("/"):
        base_path += "/"
    return [
        Path(name).name
        for name in os.listdir(base_path)
        if os.path.isfile(os.path.join(base_path, name)) and (name.endswith(".so") or name.endswith(".a"))
    ]

# Set the library path for linking
env.Append(LIBPATH=[ros_lib_path])

# Append the necessary compiler flags
env.Append(CCFLAGS=[cpp_version, exceptions])

# Get the list of ROS libraries
ros_libs = get_lib_names(ros_lib_path)
env.Append(LIBS=ros_libs)

# Exit the script (if needed, uncomment the line below)
# exit(0)